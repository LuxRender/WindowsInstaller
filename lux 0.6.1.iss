; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "LuxRender"
#define MyAppVersion "0.6.1"
#define MyAppVerName "LuxRender 0.6.1"
#define MyAppPublisher "LuxRender"
#define MyAppURL "http://www.luxrender.net"
#define MyAppExeName "luxrender.exe"
;#define MyAppArch "x86 SSE1"
;#define MyAppArch "x86 SSE2"
#define MyAppArch "x64"

#define MyAppRegRoot "SOFTWARE\LuxRender"

#define ExampleSceneDir "{commondocs}\LuxRender\Example Scene"
#define ExampleSceneFile "LuxRender_test_scene.lxs"

#define RegValInstallDir "InstallDir"
#define RegValFirewallException "FirewallException"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{C289183E-1DD8-42FA-8DFE-94F61ED1CFA3}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppVerName} {#MyAppArch}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
LicenseFile=Source\gpl-3.0.txt
OutputBaseFilename=LuxRender {#MyAppVersion} {#MyAppArch} Setup
Compression=lzma/ultra64
SolidCompression=true
MinVersion=0,5.0.2195
ChangesEnvironment=true
InternalCompressLevel=ultra64
VersionInfoVersion=0.6.1.0
VersionInfoDescription={#MyAppName} {#MyAppArch}
VersionInfoProductName={#MyAppName}
VersionInfoProductVersion=0.6.1.0
VersionInfoCompany={#MyAppPublisher}
UninstallDisplayIcon={app}\luxrender.exe
WizardImageFile=Source\wizardimage3.bmp
WizardImageBackColor=clWhite
WizardSmallImageFile=Source\wizardimagesmall.bmp
#if Copy(MyAppArch, 1, 3) == "x64"
ArchitecturesAllowed=x64
ArchitecturesInstallIn64BitMode=x64
#endif

[Languages]
Name: english; MessagesFile: compiler:Default.isl

[Tasks]
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked
Name: firewallexception; Description: {cm:AddFirewallException}; GroupDescription: {cm:AdditionalTasks}; Components: main; MinVersion: 0,5.01.2600
Name: addtopath; Description: {cm:AddToPath}; GroupDescription: {cm:AdditionalTasks}; Components: main
Name: associatelxs; Description: {cm:AssociateLXS}; GroupDescription: {cm:AdditionalTasks}; Components: main; Flags: unchecked

[Files]
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: Source\Files\{#MyAppArch}\luxrender.exe; DestDir: {app}; Flags: ignoreversion; Components: main
Source: Source\Files\{#MyAppArch}\luxconsole.exe; DestDir: {app}; Flags: ignoreversion; Components: main
Source: Source\Files\{#MyAppArch}\luxmerger.exe; DestDir: {app}; Flags: ignoreversion; Components: main
Source: Source\Files\{#MyAppArch}\Microsoft.VC90.CRT.manifest; DestDir: {app}; Flags: ignoreversion; Components: main
Source: Source\Files\{#MyAppArch}\msvcm90.dll; DestDir: {app}; Flags: ignoreversion; Components: main
Source: Source\Files\{#MyAppArch}\msvcp90.dll; DestDir: {app}; Flags: ignoreversion; Components: main
Source: Source\Files\{#MyAppArch}\msvcr90.dll; DestDir: {app}; Flags: ignoreversion; Components: main
Source: Source\Files\COPYING.txt; DestDir: {app}; Flags: ignoreversion; Components: ; Tasks: ; Languages: 
Source: Source\Files\run_slave.cmd; DestDir: {app}; Flags: ignoreversion; Components: main
Source: Source\Files\Example Scene\*; DestDir: {#ExampleSceneDir}; Flags: uninsneveruninstall onlyifdoesntexist; Components: examplescene
Source: Source\Files\LuxBlend_0.1.py; DestDir: {code:GetBlenderScriptDir}; Flags: ignoreversion; Components: exporters\luxblend; DestName: LuxBlend_0.6.py

[Icons]
Name: {group}\{#MyAppName}; Filename: {app}\{#MyAppExeName}
Name: {group}\{cm:WebsiteName}; Filename: {#MyAppURL}
Name: {group}\{cm:StartLuxRenderSlave}; Filename: {app}\run_slave.cmd; IconFilename: {app}\luxconsole.exe
Name: {commondesktop}\{#MyAppName}; Filename: {app}\{#MyAppExeName}; Tasks: desktopicon
Name: {group}\{cm:ExampleScene}; Filename: {commondocs}\LuxRender\Example Scene; Comment: Folder containg the example scene; Flags: foldershortcut

[Run]
Filename: {app}\{#MyAppExeName}; Description: {cm:LaunchProgram,{#MyAppName}}; Flags: nowait postinstall skipifsilent; WorkingDir: {code:LuxRunParameters}

[Components]
Name: main; Description: LuxRender; Flags: fixed; Types: custom compact full; Languages: 
Name: examplescene; Description: Example Scene; Types: full; Languages: 
Name: exporters; Description: Exporters; Types: full
Name: exporters\luxblend; Description: LuxBlend - Exporter for Blender; Types: full

[Registry]
Root: HKLM; Subkey: SYSTEM\CurrentControlSet\Control\Session Manager\Environment; ValueType: string; ValueName: LUXRENDER_ROOT; ValueData: {app}; Flags: uninsdeletevalue; Components: ; Tasks: ; Languages: 
Root: HKLM; Subkey: SYSTEM\CurrentControlSet\Control\Session Manager\Environment; ValueType: expandsz; ValueName: Path; ValueData: "{olddata};%LUXRENDER_ROOT%"; Tasks: addtopath; Languages: ; Flags: preservestringtype dontcreatekey; Check: NotAlreadyInPath
Root: HKCR; SubKey: .lxs; ValueType: string; ValueData: LuxRender.SceneFile; Flags: uninsdeletekey; Tasks: associatelxs
Root: HKCR; SubKey: LuxRender.SceneFile; ValueType: string; ValueData: LuxRender Scene File; Flags: uninsdeletekey; Tasks: associatelxs
Root: HKCR; SubKey: LuxRender.SceneFile\Shell; ValueType: string; ValueData: Open; Flags: uninsdeletevalue; Tasks: associatelxs
Root: HKCR; SubKey: LuxRender.SceneFile\Shell\Open\Command; ValueType: string; ValueData: """{app}\luxrender.exe"" ""%1"""; Flags: uninsdeletevalue; Tasks: associatelxs
Root: HKCR; SubKey: LuxRender.SceneFile\Shell\Edit\Command; ValueType: expandsz; ValueData: "%SystemRoot%\system32\NOTEPAD.EXE ""%1"""; Flags: uninsdeletevalue; Tasks: associatelxs
Root: HKCR; Subkey: LuxRender.SceneFile\DefaultIcon; ValueType: string; ValueData: {app}\luxrender.exe,0; Flags: uninsdeletevalue; Tasks: associatelxs
Root: HKLM; Subkey: {#MyAppRegRoot}; ValueType: string; ValueName: {#RegValInstallDir}; ValueData: {app}; Flags: uninsdeletekeyifempty uninsdeletevalue
Root: HKLM; Subkey: {#MyAppRegRoot}; ValueType: dword; ValueName: {#RegValFirewallException}; ValueData: 1; Tasks: firewallexception; Flags: uninsdeletekeyifempty uninsdeletevalue; Components: 

[CustomMessages]
BlenderScriptDirCaption=Select Blender script folder
BlenderScriptDirDesc=Where should LuxBlender be installed?
BlenderScriptDirSubCaption=In order to function, LuxBlend needs to be installed in the Blender scripts folder. This is typically the folder named "scripts" located inside the ".blender" folder you use.%n%nSelect the Blender script folder in which Setup should install LuxBlender, then click Next.
BlenderPythonCaption=Python support
BlenderPythonDesc=Please read the following important information before continuing.
BlenderPythonSubCaption=LuxBlend requires Python functionality
BlenderPythonMsg2=LuxBlend {\b requires} full Python functionality in Blender. Thus you need to ensure that Blender is set up with full Python functionality. This requires that the correct version of Python is installed separately. For example if you use Blender 2.49, you should install Python 2.6.x.\par%n\par%nFor more information on how to set up Blender with full Python functionality see http://wiki.blender.org/index.php/Doc:Manual/Introduction/Installing_Blender/Python \par%n\par%nFor information on how to download Python see http://www.python.org/download/ \par
BlenderPythonMsg={\colortbl ;\red255\green0\blue0;}Setup could not locate Python. {\cf1 LuxBlend will not function without full Python support in Blender}. You should install the same Python version as Blender was compiled with in order to get full Python support. For example if you use Blender 2.49, you should install Python 2.6.x.\par%n\par%nFor more information on how to set up Blender with full Pyton functionality see http://wiki.blender.org/index.php/Doc:Manual/Introduction/Installing_Blender/Python \par%n\par%nFor information on how to download Python see http://www.python.org/download/ \par
LuxBlendLocation=LuxBlend location:
AdditionalTasks=Additional options:
AddToPath=Add install directory to system PATH. This makes it easier to use luxconsole and luxmerger.
AssociateLXS=Associate LuxRender Scene Files (.lxs) with LuxRender.
WebsiteName={#MyAppName} Website
ExampleScene=Example Scene
ExampleLocation=Example scene location:
StartLuxRenderSlave=Start LuxRender Slave
AddFirewallException=Add Firewall exception for LuxRender slave
LuxConsole={#MyAppName} Slave
VerifyLuxBlendLocation=Are you sure you want to install LuxBlend into the following directory?%n%n"%1"%n%nIt seems that the directory is not a regular Blender script directory.%n

[Code]
var
	BlenderScriptDirPage: TInputDirWizardPage;
	PythonInfoPage: TOutputMsgMemoWizardPage;

function NotAlreadyInPath: boolean;
var
	sl: TStringList;
	s: string;
begin
	result:= false;
	sl:= TStringList.Create;
	try
		if not RegQueryStringValue(HKEY_LOCAL_MACHINE,
				'System\CurrentControlSet\Control\Session Manager\Environment',
				'Path', s) then
			// return false since we couldn't determine status
			exit;
		StringChangeEx(s, ';', #13#10, true);
		sl.Text:= s;
		if sl.IndexOf('%LUXRENDER_ROOT%') >= 0 then
			exit;
	finally
		sl.Free;
	end;
	result:= true;
end;

function FindBlenderScriptDir: string;
var
	regRoot: array[0..15] of integer;
	i, rootCount: integer;
	sl: TStringList;
	i: integer;
begin
	result:= '';

	rootCount:= 0;
	if IsWin64 then
	begin
		regRoot[rootCount]:= HKEY_LOCAL_MACHINE_64;
		rootCount:= rootCount + 1;
		regRoot[rootCount]:= HKEY_CURRENT_USER_64;
		rootCount:= rootCount + 1;
	end;
	regRoot[rootCount]:= HKEY_LOCAL_MACHINE_32;
	rootCount:= rootCount + 1;
	regRoot[rootCount]:= HKEY_CURRENT_USER_32;
	rootCount:= rootCount + 1;

	// Set default folder if empty
	for i:= 0 to rootCount-1 do
	begin
		if RegQueryStringValue(regRoot[i], 'SOFTWARE\BlenderFoundation',
				'Home_Dir', result) then
		begin
			result:= AddBackslash(result) + '.blender\scripts';
			exit;
		end
	end;

	// not in registry, try other env and places
	sl:= TStringList.Create;
	try
		sl.Add(AddBackslash(GetEnv('HOME')) + '.blender\scripts');
		sl.Add(AddBackslash(ExpandConstant('{userdocs}')) + '.blender\scripts');
		sl.Add(AddBackslash(ExpandConstant('{commondocs}')) + '.blender\scripts');
		for i:= 0 to sl.Count-1 do
		begin
		if DirExists(sl[i]) then
		begin
			result:= sl[i];
			break;
		  end;
		end;
	finally
		sl.free;
	end;
end;

function LocatePython: boolean;
var
	regRoot: array[0..15] of integer;
	pythonRoot: array[0..0] of string;
	i, j, rootCount: integer;
	keys: TArrayOfString;
begin
	rootCount:= 0;
	if IsWin64 then
	begin
		regRoot[rootCount]:= HKEY_LOCAL_MACHINE_64;
		rootCount:= rootCount + 1;
		regRoot[rootCount]:= HKEY_CURRENT_USER_64;
		rootCount:= rootCount + 1;
	end;
	regRoot[rootCount]:= HKEY_LOCAL_MACHINE_32;
	rootCount:= rootCount + 1;
	regRoot[rootCount]:= HKEY_CURRENT_USER_32;
	rootCount:= rootCount + 1;

	pythonRoot[0]:= 'SOFTWARE';
	for i:= 0 to rootCount-1 do
	begin
		for j:= 0 to 0 do
		begin
			result:= RegGetSubkeyNames(regRoot[i], pythonRoot[j] + '\Python\PythonCore', keys);
			result:= result and (GetArrayLength(keys) > 0);
			if result then
				exit;
		end;
	end;
	result:= (GetEnv('PYTHONPATH') <> '') and (DirExists(GetEnv('PYTHONPATH')));
end;

function SanityCheckBlenderScriptDir(ScriptDir: string): boolean;
var
	FindRec: TFindRec;
begin
	result:= False;
	if not DirExists(RemoveBackslashUnlessRoot(ScriptDir)) then
		exit;
	if not DirExists(ScriptDir + 'bpydata') then
		exit;
	if not FindFirst(ScriptDir + '*.py', FindRec) then
		exit;
	FindClose(FindRec);
	result:= True;
end;

procedure InitializeWizard;
begin

	BlenderScriptDirPage := CreateInputDirPage(wpSelectComponents,
		CustomMessage('BlenderScriptDirCaption'), CustomMessage('BlenderScriptDirDesc'),
		CustomMessage('BlenderScriptDirSubCaption'),
		False, '');
	BlenderScriptDirPage.Add('');

	PythonInfoPage := CreateOutputMsgMemoPage(BlenderScriptDirPage.ID,
		CustomMessage('BlenderPythonCaption'), CustomMessage('BlenderPythonDesc'),
		CustomMessage('BlenderPythonSubCaption'),
		'{\rtf1\ansi ' + CustomMessage('BlenderPythonMsg') + ' }');

	BlenderScriptDirPage.Values[0] := GetPreviousData('BlenderScriptDir', '');
end;


function ShouldSkipPage(PageID: Integer): Boolean;
begin
	result:= false;
	if (PageID = BlenderScriptDirPage.ID) or (PageId = PythonInfoPage.ID) then
	begin
		result:= not IsComponentSelected('exporters\luxblend');
	end;
	if (PageId = PythonInfoPage.ID) and (not result) then
	begin
		result:= LocatePython;
		exit;
	end;
end;

procedure RegisterPreviousData(PreviousDataKey: Integer);
begin
	// Store the selected folder for further reinstall/upgrade
	SetPreviousData(PreviousDataKey, 'BlenderScriptDir', BlenderScriptDirPage.Values[0]);
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
	Result := False;

	// Set default folder if empty
	if BlenderScriptDirPage.Values[0] = '' then
	begin
		BlenderScriptDirPage.Values[0]:= FindBlenderScriptDir;
	end;

	if CurPageID = BlenderScriptDirPage.ID then
	begin
		if not SanityCheckBlenderScriptDir(AddBackslash(BlenderScriptDirPage.Values[0])) then
		begin
			// if sanity check fails, ask user to verify directory
			if MsgBox(FmtMessage(CustomMessage('VerifyLuxBlendLocation'), [BlenderScriptDirPage.Values[0]]),
					mbConfirmation, MB_YESNO or MB_DEFBUTTON2) = IDNO then
				exit;
		end;
	end;
	Result := True;
end;

function UpdateReadyMemo(Space, NewLine, MemoUserInfoInfo, MemoDirInfo, MemoTypeInfo,
	MemoComponentsInfo, MemoGroupInfo, MemoTasksInfo: String): String;
var
	S: String;
begin
	// Fill the 'Ready Memo' with the normal settings and the custom settings
	S:= '';

	S:= S + MemoDirInfo + NewLine + NewLine;
	if (not ShouldSkipPage(BlenderScriptDirPage.ID)) then
	begin
		S:= S + CustomMessage('LuxBlendLocation') + NewLine;
		S:= S + Space + BlenderScriptDirPage.Values[0] + NewLine;
		S:= S + NewLine;
	end;

	if IsComponentSelected('examplescene') then
	begin
		S:= S + CustomMessage('ExampleLocation') + NewLine;
		S:= S + Space + ExpandConstant('{#ExampleSceneDir}') + NewLine;
		S:= S + NewLine;
	end;

	Result:= S;
end;

function GetBlenderScriptDir(Param: String): String;
begin
	{ Return the selected BlenderScriptDir }
	Result := BlenderScriptDirPage.Values[0];
end;

function LuxRunParameters(Param: string): string;
begin
	result:= '';
	if not IsComponentSelected('examplescene') then
		exit;

//	result:= ExpandConstant('{#ExampleSceneDir}\{#ExampleSceneFile}');
	result:= ExpandConstant('{#ExampleSceneDir}');
	if DirExists(result) then
//		result:= AddQuotes(result)
		result:= result
	else
		result:= '';
end;

// firewall code from CHB
// http://news.jrsoftware.org/news/innosetup/msg43799.html
const
	NET_FW_SCOPE_ALL = 0;
	NET_FW_IP_VERSION_ANY = 2;

procedure SetFirewallException(AppName, FileName:string);
var
	FirewallObject: Variant;
	FirewallManager: Variant;
	FirewallProfile: Variant;
begin
	try
		FirewallObject := CreateOleObject('HNetCfg.FwAuthorizedApplication');
		FirewallObject.ProcessImageFileName := FileName;
		FirewallObject.Name := AppName;
		FirewallObject.Scope := NET_FW_SCOPE_ALL;
		FirewallObject.IpVersion := NET_FW_IP_VERSION_ANY;
		FirewallObject.Enabled := True;
		FirewallManager := CreateOleObject('HNetCfg.FwMgr');
		FirewallProfile := FirewallManager.LocalPolicy.CurrentProfile;
		FirewallProfile.AuthorizedApplications.Add(FirewallObject);
	except
	end;
end;

procedure RemoveFirewallException(FileName: string);
var
	FirewallManager: Variant;
	FirewallProfile: Variant;
begin
	try
		FirewallManager := CreateOleObject('HNetCfg.FwMgr');
		FirewallProfile := FirewallManager.LocalPolicy.CurrentProfile;
		FirewallProfile.AuthorizedApplications.Remove(FileName);
	except
	end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
	if (CurStep = ssPostInstall) then
	begin
		if IsTaskSelected('firewallexception') then
		begin
			SetFirewallException(CustomMessage('LuxConsole'), ExpandConstant('{app}') + '\luxconsole.exe');
		end;
	end;
end;

var
  InstalledFirewallException: boolean;

function InitializeUninstall(): Boolean;
var
  val: Cardinal;
begin
	result:= True;

	InstalledFirewallException:= False;
	if RegQueryDWordValue(HKEY_LOCAL_MACHINE, '{#MyAppRegRoot}', '{#RegValFirewallException}', val) then
		InstalledFirewallException:= val <> 0;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
	if (CurUninstallStep = usPostUninstall) then
	begin
		if InstalledFirewallException then
			RemoveFirewallException(ExpandConstant('{app}') + '\luxconsole.exe');
	end;
end;


[InstallDelete]
Name: {app}\LuxRender.url; Type: files
